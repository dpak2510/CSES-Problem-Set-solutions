#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
ll n, q, a, b, ind=1;
vector<ll> tree[200001];
ll val[200001], seg[200001], inm[200001], sgt[200001], dsts[200001];
bitset<200001> vis;
 
ll dfs(ll src, ll dis, ll &ind)
{
	vis[src] = 1;
	inm[src] = ind;
	ll cnt=0;
	for(auto u: tree[src])
		if(!vis[u])
			cnt+=dfs(u, dis+val[u], ++ind);
	dsts[inm[src]] = dis;
	seg[inm[src]] = cnt+1;
	return cnt+1;
}
 
void update( int src, ll x )
{
	src++;
	while(src<=n)
		sgt[src]+=x, src += src&-src;
}
 
ll sum(int b)
{
	ll rb=0;
	b++;
	while(b) rb+=sgt[b], b-=b&-b;
	return rb;
}
 
int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	cin>>n>>q;
	for(ll i=1;i<=n;i++)
		cin>>val[i];
	for(ll i=0;i<n-1;i++)
		cin>>a>>b, tree[a].push_back(b), tree[b].push_back(a);
	dfs(1, val[1], ind);
	for(int i=1;i<=n;i++)
		update(i-1,dsts[i]-dsts[i-1]);
	while(q--)
	{
		ll type;
		cin>>type;
		if(type==2)
		{
			cin>>a;
			cout<<sum(inm[a]-1)<<"\n";
		}
		else
		{
			cin>>a>>b;
			update(inm[a]-1, b-val[a]);
			update(inm[a]+seg[inm[a]]-1, val[a]-b);
			val[a] = b;
		} 
	}
	return 0;
}